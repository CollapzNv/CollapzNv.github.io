<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>彳亍</title>
  
  <subtitle>富春</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-03T09:56:54.911Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CollapzNv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>平台迁移</title>
    <link href="http://yoursite.com/post/Platform/"/>
    <id>http://yoursite.com/post/Platform/</id>
    <published>2019-07-03T06:19:31.000Z</published>
    <updated>2019-07-03T09:56:54.911Z</updated>
    
    <content type="html"><![CDATA[<p>有了相应对策和扶墙玩法的创新，客观来看提升了所有人的技术水平，从大环境来看，局域网只会越演越烈。人人都想挣脱这个“局域网”，但肉身离网又哪有这么简单呢？</p><a id="more"></a><hr><p>在大致了解各平台大大小小约20个客户端后，我选择了以下3种（Unix的暂不考虑）</p><p>◼️MacOS/Windows: Clash</p><p>◼️ANDROID: Kitsunebi</p><p>◼️IOS: Shadowrocket[2.99$|国区无] / Kitsunebi[4.99$|国区有]</p><h3 id="细则"><a href="#细则" class="headerlink" title="细则"></a>细则</h3><h4 id="Clash"><a href="#Clash" class="headerlink" title="Clash"></a><a href="#Clash">Clash</a></h4><p>&emsp;&emsp;▶️<a href="#general">常规页面</a></p><p>&emsp;&emsp;▶️<a href="#proxy">代理页面</a></p><p>&emsp;&emsp;️▶️<a href="#manager">配置管理</a></p><h4 id="Kitsunebi"><a href="#Kitsunebi" class="headerlink" title="Kitsunebi"></a><a href="#Kitsunebi">Kitsunebi</a></h4><p>&emsp;&emsp;▶️<a href="#kitsunebi_main">主界面</a></p><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a><a href="#End">写在最后</a></h4><p>&emsp;&emsp;▶️<a href="#conclusion">使用感受</a></p><p>&emsp;&emsp;▶️<a href="#download">下载</a></p><hr><h4 id="Clash-1"><a href="#Clash-1" class="headerlink" title="Clash"></a><span id="Clash">Clash</span></h4><p>这里主要介绍Windows，OS和Windows的配置几乎相同。</p><h5 id="常规页面"><a href="#常规页面" class="headerlink" title="常规页面"></a><span id="general">常规页面</span></h5><p><img src="/post/Platform/CFW.jpg" alt="主界面"></p><p>在常规页面下可以清楚了解当前配置文件的设置，譬如常规的http和socks5代理端口等，方便对某些应用单独进行配置代理。</p><p><em>名词</em></p><ul><li>System Proxy：系统代理开关</li><li>Start with Windows：开机自启动开关</li></ul><p><em>点击行为</em></p><ul><li>connected to Clash：快速打开logs文件夹</li><li>Clash for Windows（标题）：快速重启软件</li><li>Home Directory右侧路径：快速打开配置文件目录</li><li>EnableLoopback.exe：快速打开回环代理限制器</li><li>Port到External Controller字段：快速打开基础配置文件（config.yml)</li></ul><p><em>悬停行为</em></p><ul><li>Allow LAN：显示当前所有网卡IPv4地址</li></ul><p><em>Tips</em></p><ol><li>Allow LAN默认为false，进入配置文件修改至true后，鼠标悬停可查看地址</li><li>UWP功能需要win8以上的版本才能使用</li><li>日志文件7天删除一次，和配置文件在同个目录下</li></ol><h5 id="代理页面Proxies"><a href="#代理页面Proxies" class="headerlink" title="代理页面Proxies"></a><span id="proxy">代理页面Proxies</span></h5><p><img src="/post/Platform/CFW_proxies.jpg" alt="代理页面"></p><p>代理页面主要的作用就是<strong>切换代理模式</strong>和<strong>切换节点</strong></p><p><em>切换代理模式</em></p><p>和大多数代理软件一样，分为三种模式：</p><ul><li>全局（Global）：所有请求直接发往<strong>代理服务器</strong></li><li>规则（Rule）：所有请求<strong>根据配置文件规则进行分流</strong></li><li>直连（Direct）：所有请求直接发往<strong>目的地</strong></li></ul><p>切换不同模式时，对应的节点列表会对应变化</p><p><em>切换节点</em></p><p>节点按照策略组分开，并可以以组为单位进行<strong>延迟测试</strong>，可以方便选出延迟更低的节点。或者可以使用策略组优化逻辑</p><h5 id="配置管理Profiles"><a href="#配置管理Profiles" class="headerlink" title="配置管理Profiles"></a><span id="manager">配置管理Profiles</span></h5><p><img src="/post/Platform/CFW_profiles.jpg" alt="配置管理页面"></p><p>点击配置项里的✈样图标可进行配置修改，如下图：</p><p><img src="/post/Platform/CFW_manage.jpg" alt="配置修改"></p><ol><li>这里有两个特殊节点(Special Proxies)，很好理解，直连和断网。这里的直连为【代理页面Proxies的Global】下的直连，作用和【代理页面Proxies的Direct】一样。</li><li>接着是策略组(Proxy Groups)。策略组可以包含节点或其他策略组，可以具有多种不同的策略类型，所有的策略组都是服务于规则(Rule)的，策略组可以去掉不用，单独选节点。更多详细可以这里的wiki：<a href="https://github.com/Fndroid/jsbox_script/wiki/%E5%85%B3%E4%BA%8E%E7%AD%96%E7%95%A5%E7%BB%84%E7%9A%84%E7%90%86%E8%A7%A3" target="_blank" rel="noopener">链接</a></li><li>然后是节点(Proxies)。根据不同的扶墙方式添加配置。</li><li>最后是右边紫色的分组。去掉所有策略组(Proxy Groups)则右边消失。在配置界面里，可以对所有的策略组和节点进行重新安排规划，左边的策略组（Proxy Group）可以上下拖动排序，也可以把左边的节点(Proxies)拖动到右边的分组里，具体如何安排请根据个人需求规划。Clash 要求被包含的策略组需要定义在包含的策略组上面，否则解析会出错。</li></ol><p><img src="/post/Platform/CFW_rule.jpg" alt="规则修改"></p><p>​    此界面用于增加和删减配置文件中的规则，目前Clash支持的规则类型如下：</p><ol><li>DomainSuffix：域名后缀匹配</li><li>Domain：域名匹配</li><li>DomainKeyword：域名关键字匹配</li><li>IPCIDR：IP段匹配</li><li>GEOIP：GEOIP数据库（国家代码）匹配</li></ol><hr><h4 id="Kitsunebi-1"><a href="#Kitsunebi-1" class="headerlink" title="Kitsunebi"></a><span id="Kitsunebi">Kitsunebi</span></h4><p><span id="Kitsunebi_main">主界面</span></p><p><img src="/post/Platform/kitsunebi_main.png" alt="main"></p><p>页面和使用方式大致和SSR及SS配置类似，流量统计在”Analysis”-&gt;”Proxy Logs”中查看，效果如下图：</p><p><img src="/post/Platform/kitsunebi_log.png" alt="proxy_log"></p><p>界面语言支持简中、繁中、英，配色有蓝色、粉色两种可选。</p><hr><h4 id="写在最后-1"><a href="#写在最后-1" class="headerlink" title="写在最后"></a><span id="End">写在最后</span></h4><p><span id="conclusion">使用感受</span></p><p>​    <strong>Clash</strong>项目分支多，目前完善的只有MacOS和Windows端，android端不稳定。作为一款单人开发的产品，这里感谢作者花时间和精力开发。但如果要作为产品来说，还有很多地方需要改进（热键唤出什么的），有心人可以pr后修改（分支master已经remove了）</p><p>优点</p><ul><li>UI舒适（和Surge相似）、无广告</li><li>支持负载均衡，分流可按域名，不同的应用可使用不同的节点，比pac强大</li><li>支持订阅</li></ul><p>缺点</p><ul><li>不支持扶墙方式单个导入（比如二维码[PC暂且不提]、链接等）</li><li>没有流量统计功能，需要三方用户WEB界面查看，于用户和机长都不方便</li><li>学习成本较先前的所有平台都要高，且客户端容量大，内存使用高（一般用户没用过Surge）</li><li>不支持udp。所以二级ISP是无法使用的，比如窄带通、方圆窄带、几百块n年送路由器的那种。一级的没问题：奠信、移得动、连不通。</li></ul><p>​    <em>——————————————————————————————————</em></p><p>​    <strong>Kitsunebi</strong>原本在Appstore上有一个0.99$的Lite版，但是各种原因下架了，目前就一个Android端。</p><p>优点</p><ul><li>支持vmess的传输协议多，tcp、kcp、ws、http都支持。</li><li>学习成本低，上手简单</li><li>流量统计</li></ul><p>缺点</p><ul><li>无分享功能</li><li>不支持SSR</li></ul><p><span id="download">下载</span></p><p><a href="https://pan.baidu.com/s/1WRoNeAFG6rKiiQ08D8F96Q" target="_blank" rel="noopener">下载地址</a></p><p>CLASH版本：Win0.6.0、Kitsunebi版本：v1.6.13</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有了相应对策和扶墙玩法的创新，客观来看提升了所有人的技术水平，从大环境来看，局域网只会越演越烈。人人都想挣脱这个“局域网”，但肉身离网又哪有这么简单呢？&lt;/p&gt;
    
    </summary>
    
      <category term="OTHERS" scheme="http://yoursite.com/categories/OTHERS/"/>
    
    
      <category term="NOTE" scheme="http://yoursite.com/tags/NOTE/"/>
    
  </entry>
  
  <entry>
    <title>对接海关总署</title>
    <link href="http://yoursite.com/post/%E5%AF%B9%E6%8E%A5%E6%B5%B7%E5%85%B3%E6%80%BB%E7%BD%B2%E6%9C%89%E6%84%9F/"/>
    <id>http://yoursite.com/post/对接海关总署有感/</id>
    <published>2019-05-22T10:08:44.000Z</published>
    <updated>2019-05-31T10:50:20.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离海关对接信息发布至现在已过去5个月，一直在写还是不写之间纠结。（懒）</p><p>技术原理虽然简单，但是过程漫长（15天），让人焦急，中间还发生了小插曲，特此记录。</p><a id="more"></a><hr><p>因海关在12月发布了”跨境电子商务平台企业支付相关原始数据”公告</p><p><img src="/post/对接海关总署有感/165、179公告.jpg" alt="总署公告"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;距离海关对接信息发布至现在已过去5个月，一直在写还是不写之间纠结。（懒）&lt;/p&gt;
&lt;p&gt;技术原理虽然简单，但是过程漫长（15天），让人焦急，中间还发生了小插曲，特此记录。&lt;/p&gt;
    
    </summary>
    
      <category term="WORK" scheme="http://yoursite.com/categories/WORK/"/>
    
    
      <category term="OPNION" scheme="http://yoursite.com/tags/OPNION/"/>
    
  </entry>
  
  <entry>
    <title>使用ASF云挂卡</title>
    <link href="http://yoursite.com/post/%E4%BD%BF%E7%94%A8ASF/"/>
    <id>http://yoursite.com/post/使用ASF/</id>
    <published>2019-05-21T03:30:39.000Z</published>
    <updated>2019-07-03T06:12:10.690Z</updated>
    
    <content type="html"><![CDATA[<p>继Idle Master的作者不再更新后，GFW也升级了，魔改版的能用但时间长，且只有挂卡功能。所以了解了一下ASF，把手上的卡挂掉了。<del>然后堆仓库</del></p><a id="more"></a><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p><a href="#dotnet">.Net Core 2.0</a></p><p><a href="#asf">ASF</a></p><p><a href="#ascf">ASCF（国内vps）</a></p><p><a href="#tmux">Tmux</a></p><p><a href="#run">运行</a></p><p><a href="#chatcontrol">组内控制</a></p><p><a href="#appendix">附录</a></p><hr><h4 id="安装-Net-Core-2-0"><a href="#安装-Net-Core-2-0" class="headerlink" title="安装.Net Core 2.0"></a><span id="dotnet">安装.Net Core 2.0</span></h4><p>因asf由c#编写，需.Net Core 2.0环境。</p><p>微软官方安装文档：<a href="https://www.microsoft.com/net/learn/get-started/linux/centos" target="_blank" rel="noopener">https://www.microsoft.com/net/learn/get-started/linux/centos</a></p><p>添加feed</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://packages.microsoft.com/keys/microsoft.asc</span><br></pre></td></tr></table></figure><p>添加安装源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">'echo -e "[packages-microsoft-com-prod]\nname=packages-microsoft-com-prod \nbaseurl=https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" &gt; /etc/yum.repos.d/dotnetdev.repo'</span></span><br></pre></td></tr></table></figure><p>安装.Net Core 2.0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum -y install libunwind libicu</span><br><span class="line">yum -y install dotnet-sdk-2.0.0</span><br></pre></td></tr></table></figure><p>安装后完成检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --version</span><br></pre></td></tr></table></figure><hr><h4 id="安装ASF"><a href="#安装ASF" class="headerlink" title="安装ASF"></a><span id="asf">安装ASF</span></h4><p>wget一个stable的release/ASF-linux-x64.zip</p><p>地址：<a href="https://github.com/JustArchi/ArchiSteamFarm" target="_blank" rel="noopener">https://github.com/JustArchi/ArchiSteamFarm</a></p><p>解压即可，运行需要执行权限。</p><p>Bot配置文件地址：<a href="https://justarchinet.github.io/ASF-WebConfigGenerator/#/bot" target="_blank" rel="noopener">https://justarchinet.github.io/ASF-WebConfigGenerator/#/bot</a>（要勾上enabled）</p><p>配置文件为json，上传至asf目录的config文件夹下，可上传多个。</p><hr><h4 id="安装ASCF（国内vps）"><a href="#安装ASCF（国内vps）" class="headerlink" title="安装ASCF（国内vps）"></a><span id="ascf">安装ASCF（国内vps）</span></h4><p>地址：<a href="https://github.com/zyfworks/AnotherSteamCommunityFix/releases" target="_blank" rel="noopener">https://github.com/zyfworks/AnotherSteamCommunityFix</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget &amp;&amp; wget release地址</span><br></pre></td></tr></table></figure><p>同样解压后即可，需要执行权限。</p><hr><h4 id="安装Tmux"><a href="#安装Tmux" class="headerlink" title="安装Tmux"></a><span id="tmux">安装Tmux</span></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install tmux</span><br></pre></td></tr></table></figure><p>创建新tmux窗口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s asf</span><br></pre></td></tr></table></figure><p>查看会话列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux list-sessions</span><br></pre></td></tr></table></figure><p>进入窗口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux a -t asf</span><br></pre></td></tr></table></figure><p>以下为进入窗口后的操作：</p><p><code>窗口切换：ctrl+b，松开后按方向键</code></p><p><code>退出窗口后台运行：ctrl+b，松开后按d</code></p><p><code>显示窗口数字：ctrl+b,松开后按q</code> </p><p><code>移动道特定窗口：ctrl+b,松开后按窗口编号</code></p><p><code>关闭窗口：ctrl+d，或者exit，logout</code></p><hr><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a><span id="run">运行</span></h4><blockquote><p><strong>国内vps需先运行ASCF</strong>：<code>./ascf</code></p><p>运行后按下ctrl+b，松开后按下%，垂直分割一个窗口；或按下”水平分割一个窗口。</p></blockquote><p>运行ASF</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ArchiSteamFarm</span><br></pre></td></tr></table></figure><p>ASF默认执行所有账号，所以config目录文件下的配置项全会执行，如有手机验证码会一一提示输入。</p><p>卡片一般挂满两小时后开始陆续掉落，时间与实际相比相差不多。</p><hr><h4 id="组内控制"><a href="#组内控制" class="headerlink" title="组内控制"></a><span id="control">组内控制</span></h4><p>组内控制即是在steam组内通过聊天可对ASF实现远程控制。</p><ol><li><p>创建Steam私人组</p><p>选择一个主控账号，创建私人组。不要勾选公共选项。</p></li><li><p>增加命令行模式</p><p>在全局配置页面中输入主账号的Steam账号ID：<a href="https://justarchinet.github.io/ASF-WebConfigGenerator/#/asf" target="_blank" rel="noopener">全局配置页面</a>；</p><p>下载配置文件得到ASF.json，上传至ASF的config文件夹中，注意该文件为全局配置，名称固定；</p><p>上传后运行ASF显示会多一行”StartInteractiveConsole() Interactive console is now active, type ‘c’ in order to enter command mode. “，即在成功运行后可以按小写c进入命令行模式，每一个命令需要按一次c。</p></li><li><p>配置修改</p><p>获取组id：给组主页的链接加上memberslistxml/?xml=1后，获得64位的组ID。</p><p><a href="https://justarchinet.github.io/ASF-WebConfigGenerator/#/bot" target="_blank" rel="noopener">Bot配置页面</a>中找到SteamMasterClanID，把组ID填入；同时需要找到SteamUserPermissions选项，添加成员权限，权限共4种。</p></li><li><p>使用命令</p><p>打开组聊天页面，在每条命令前加上”!”即可，如输入后无信息，修改对应成员的SteamUserPermissions并重启；默认是0，所以需要每个Bot配置都要添加。</p></li></ol><hr><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a><span id="appendix">附录</span></h4><ol><li>常见命令</li></ol><table><thead><tr><th style="text-align:left">Command</th><th style="text-align:center">Access</th><th style="text-align:left">Description</th></tr></thead><tbody><tr><td style="text-align:left">addlicense <bots> <gameids></gameids></bots></td><td style="text-align:center">Operator</td><td style="text-align:left">为指定机器人激活给定的 <code>AppIDs</code>（Steam 网络）或 <code>SubIDs</code>（Steam 商店），仅免费游戏有效。</td></tr><tr><td style="text-align:left">redeem <bots> <keys></keys></bots></td><td style="text-align:center">Operator</td><td style="text-align:left">为指定机器人激活给定的游戏序列号或钱包充值码。</td></tr><tr><td style="text-align:left">play <bots> &lt;AppIDs,GameName&gt;</bots></td><td style="text-align:center">Master</td><td style="text-align:left">切换到手动挂卡——使指定机器人运行给定的 <code>AppIDs</code>，并且可选自定义 <code>GameName</code> 为游戏名称。 使用 <code>resume</code> 以返回自动挂卡模式。</td></tr><tr><td style="text-align:left">pause <bots></bots></td><td style="text-align:center">Operator</td><td style="text-align:left">永久暂停指定机器人的自动挂卡模块。 ASF 在本次会话中将不会再尝试对此帐户进行挂卡，除非您手动 <code>resume</code> 或者重启 ASF。</td></tr><tr><td style="text-align:left">resume <bots></bots></td><td style="text-align:center">FamilySharing</td><td style="text-align:left">恢复指定机器人的自动挂卡进程。 参见 <code>pause</code> 和 <code>play</code>。</td></tr><tr><td style="text-align:left">start <bots></bots></td><td style="text-align:center">Master</td><td style="text-align:left">启动指定机器人。</td></tr><tr><td style="text-align:left">stats</td><td style="text-align:center">Owner</td><td style="text-align:left">显示进程统计信息，例如托管内存用量。</td></tr><tr><td style="text-align:left">status <bots></bots></td><td style="text-align:center">FamilySharing</td><td style="text-align:left">显示指定机器人的状态。</td></tr><tr><td style="text-align:left">stop <bots></bots></td><td style="text-align:center">Master</td><td style="text-align:left">停止指定机器人。</td></tr><tr><td style="text-align:left">exit</td><td style="text-align:center">Owner</td><td style="text-align:left">完全停止 ASF 进程。</td></tr></tbody></table><p>   <a href="https://github.com/JustArchiNET/ArchiSteamFarm/wiki/Commands" target="_blank" rel="noopener">命令详细地址</a></p><ol start="2"><li><p>ASF_<strong>V4.0.0.4+ </strong>常用配置项</p><p>{</p><p>SteamLogin  //string 账号</p><p>SteamPassword  //string 密码</p><p>Enabled  //bool 是否启用</p><p>ShutdownOnFarmingFinished //bool 挂卡完成后是否关闭程序CustomGamePlayedWhileFarming //string 自定义挂卡游戏名</p><p>CustomGamePlayedWhileIdle //string 自定义挂卡结束后游戏名</p><p>GamesPlayedWhileIdle [] //int steam appID，最多30个。</p><p>OnlineStatus //int 在线状态  0离线 1在线 2忙碌 3离开 4打盹  5想交易 6想玩游戏 7隐身</p><p>}</p></li></ol><p><code>除最主要的挂卡功能之外，ASF还提供交易功能、自动合卡、IPC等功能。</code></p><p>官方WIKI：<a href="https://github.com/JustArchi/ArchiSteamFarm/wiki" target="_blank" rel="noopener">https://github.com/JustArchi/ArchiSteamFarm/wiki</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继Idle Master的作者不再更新后，GFW也升级了，魔改版的能用但时间长，且只有挂卡功能。所以了解了一下ASF，把手上的卡挂掉了。&lt;del&gt;然后堆仓库&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="OTHERS" scheme="http://yoursite.com/categories/OTHERS/"/>
    
    
      <category term="STEAM" scheme="http://yoursite.com/tags/STEAM/"/>
    
  </entry>
  
  <entry>
    <title>门罗币小记</title>
    <link href="http://yoursite.com/post/%E9%97%A8%E7%BD%97%E5%B8%81%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/post/门罗币小记/</id>
    <published>2019-05-16T08:38:30.000Z</published>
    <updated>2019-07-03T09:12:58.897Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近比特币热度又升高了，有些人通过年底屯币实现了财务自由。当然这些事情听听就好了，不过没接触过的我有些好奇，刚好还有空闲的机子，那么就来捣鼓一下<del>（测试一下性能）</del>吧。</p><a id="more"></a><p>选币</p><p>首先选择需要挖的币种，单个价值太高的币种不要选，因为取出所耗费的资源相对较大，周期也较长。这里我选择了算法GPU和CPU相同的（<strong>BitMonero</strong>）门罗币，对新手友好，且它也比较热门。</p><p><strong>长的也比较可爱。</strong></p><div align="center"><img src="/post/门罗币小记/monero-logo.png" alt=""></div><p>在<a href="https://web.getmonero.org" target="_blank" rel="noopener">官网注册</a>后需要注册得到钱包，也可以叫它钱包地址–长度为95的字符串（不同币种的钱包长度可能不同）。官方提供了windows、os和linux的GUI，很舒服。</p><hr><h3 id="选矿池"><a href="#选矿池" class="headerlink" title="选矿池"></a>选矿池</h3><p>矿池通俗点解释就是个人或某一组织通过方法将互联网上的特定算力结合起来，联合运作，通常以网站的形式存在。参与者按照算力比例分摊风险，分摊收益，同时矿池会收取一定的手续费，这点可能会在取币或者转币中体现出来。一个矿池就是一个算力的集合。下图为<a href="https://miningpoolstats.stream" target="_blank" rel="noopener">矿池列表</a>。</p><p><img src="/post/门罗币小记/矿池.jpg" alt="minepool"></p><p>我选择了nanopool，该矿池支持的币种多，地址分布多，可转真实币种多…（<del>我怎么好像在打广告</del>）总之新手选它就对了。左侧输入币种就能选择相应矿池。矿池的模式这里就不说了，以后<del>有钱</del>再了解。</p><hr><h3 id="程序准备"><a href="#程序准备" class="headerlink" title="程序准备"></a>程序准备</h3><p>目标、目的地、荷包都准备好了，只差干活工具了。</p><p>个人原因，没有台式机<del>（我在想要不要把废弃的7670按到公司主机上嘿）</del>无法进行GPU挖矿， 有能力的同学可以去买淘宝魔改卡，便宜大碗，一张不够，偷电来凑。</p><p>程序这里选择xmr-stak。<del>年薪百万的同学可以自己写一个</del></p><p>xmr-stak的<a href="https://www.xmrstak.com/" target="_blank" rel="noopener">网站</a>介绍给出了硬件算力的benchmarks，可以清楚了解自己几斤几两<del>（嗯？）</del></p><p><strong>LINUX : 这里以Centos 7为例</strong></p><ol><li>linux下的xmr-stak需要编译，所以先安装cmake：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y install centos-release-scl cmake3 hwloc-devel libmicrohttpd-devel openssl-devel</span><br><span class="line">yum -y install devtoolset-4-gcc*</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-4 bash -y remove cmake</span><br><span class="line">wget https://cmake.org/files/v3.7/cmake-3.7.2.tar.gz</span><br><span class="line">tar zxf cmake-3.7.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-3.7.2</span><br><span class="line">./bootstrap</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><code>例子默认为ROOT，不是的同学yum别忘了加sudo哦。</code></p><ol start="2"><li>然后安装xmr-stak：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/bin/</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/fireice-uk/xmr-stak-cpu xmr-stak</span><br><span class="line"><span class="built_in">cd</span> xmr-stak</span><br><span class="line">cmake .</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><blockquote><p>源代码默认会有2%的开发者贡献。换言之，默认每100分钟里有两分钟你是为开发者挖矿，文件在 ./xmrstak/donate-level.hpp中，内容如下图所示：</p><p><img src="/post/门罗币小记/donate.png" alt="donate"></p></blockquote><p>最后一行的fDevDonationLevel的默认值为 2.0 / 100.0; 当然你也可以改成0.0 / 100.0，或者当一个大善人写成 100.0 /100.0，嗯。</p><ol start="3"><li><p>配置文件有三个：config.txt、cpu.txt、pools.txt，目录在 ../build/bin/ 。需要账号密码登陆的矿池这里需要找到”http_login”和”http_pass”。nanopool矿池不需要配置；cpu.txt中可以参与挖矿的cpu线程数，默认为所有线程满速；最主要的pools.txt为<del>币池（噗）</del>矿池地址和端口，以及钱包地址。如下图。</p><p><img src="/post/门罗币小记/pool.png" alt="pool.txt"></p></li><li><p>设置完成后保存，输入”xmr-stak””开始挖矿。挖矿过程中按’h’查看算力情况，按’r’查看结果，按’c’查看连接情况。这里可能会有提示：MEMORY ALLOC FAILED: mmap with HUGETLB failed, attempting witout it(you should fix your kernel)，可以忽略，不影响结果。</p><p>或者按照如下修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.nr_hugepages=128</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"* soft memlock 262144"</span> &gt;&gt; /etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"* hard memlock 262144"</span> &gt;&gt; /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p>修改后需要重启或注销。</p></li></ol><h5 id="WINDOWS-这里以WIN7为例"><a href="#WINDOWS-这里以WIN7为例" class="headerlink" title="WINDOWS : 这里以WIN7为例"></a>WINDOWS : 这里以WIN7为例</h5><p>xmr-stak的下载地址：<a href="https://github.com/fireice-uk/xmr-stak/releases" target="_blank" rel="noopener">https://github.com/fireice-uk/xmr-stak/releases</a></p><p>作者只开发了64位，选择xmr-stak-win64的7z或zip下载至本地，解压。文件夹只有一层，配置文件和linux上的相同，修改后启动xmr-stak.exe。</p><hr><h3 id="挖矿情况"><a href="#挖矿情况" class="headerlink" title="挖矿情况"></a>挖矿情况</h3><p><strong>网管，上机！</strong></p><p><img src="/post/门罗币小记/惨不忍睹.jpg" alt="vps1"></p><p>不得不说4核8G的机子真贵，40$一个月（其实也不贵）。不过反正10$薅来的，一个月后dump掉，还能用1核1G的跑机场两个月；至于4000G的流量，当然是用来爬东西了。这么一想瞬间开心了起来~</p><p>挖矿详细结果在这里：<a href="https://xmr.nanopool.org/" target="_blank" rel="noopener">https://xmr.nanopool.org</a></p><p>过了几十分钟，迫不及待得去矿池网站上康康情况，一康…</p><p><img src="/post/门罗币小记/惨不忍睹2.jpg" alt="result"></p><p>一个月0.4$，嗯，两块多，可以买一根豪华棒棒糖。</p><p>再康康排名第一的大佬算力，一康…</p><p><img src="/post/门罗币小记/hashrate.png" alt="dalaos"></p><p>？？？</p><p>3,990,000，快我的20w倍，这，谁顶得住啊….家里有矿？？？电费一天多少？？？邻居不会因噪音报警？？？</p><p>…</p><p>这里我主要看6小时平均算力，显示40.8H/s，和挖矿程序上显示的不一致是因为我运行的时间不长，所以网站里显示偏低。</p><p>既然感觉有点低那就把windows的也打开哈哈哈。</p><p><img src="/post/门罗币小记/惨不忍睹3.jpg" alt="process"></p><p>牙膏厂的7500挖门罗币差不多提供60的算力，不错了，毕竟CPU并行速度和GPU速度没法比，当然了不是一慨而论的。</p><p>一打开windows挖矿程序CPU立马飙到100%，于是我看了看vps的情况：</p><p><img src="/post/门罗币小记/vps.png" alt="vps3"></p><p>嗯，400%，还行，估计再过几个小时管理员就要发给我邮件并封禁我的vps了 : ）</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我开了一晚上的主机和vps，算力大概有240，1066的OC版大约550的算力（比公版的高几个单位）。另不建议用vps挖矿，虽然有些主机商没有明确指出，但长时间挖矿对硬件寿命影响较大，没有主机商会傻乎乎的让你挖。<del>（其实写个定时任务，分割成三段，每次五小时，CPU每核调到80%占用就可以了。不是我，我没有）</del></p><p>照我的玩法，一个月能有2.4$。但是一看提现至少需要1个门罗币，我一个月0.027个门罗币，何况开着windows挖矿没法工作<del>（更没法摸鱼）</del>，我告诉自己早睡早起，好好工作，别想些有的没的。</p><p>每个矿区的算法不同，难度不同，<strong>算力太小无法获得收益</strong>。总之一句话：<strong>挖矿有风险，入市需谨慎</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近比特币热度又升高了，有些人通过年底屯币实现了财务自由。当然这些事情听听就好了，不过没接触过的我有些好奇，刚好还有空闲的机子，那么就来捣鼓一下&lt;del&gt;（测试一下性能）&lt;/del&gt;吧。&lt;/p&gt;
    
    </summary>
    
      <category term="OTHERS" scheme="http://yoursite.com/categories/OTHERS/"/>
    
    
      <category term="BITCOIN" scheme="http://yoursite.com/tags/BITCOIN/"/>
    
  </entry>
  
  <entry>
    <title>IF/ELSE的处理方式</title>
    <link href="http://yoursite.com/post/IF&amp;ELSE%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/post/IF&amp;ELSE的处理方式/</id>
    <published>2019-02-20T05:30:30.000Z</published>
    <updated>2019-07-03T06:12:34.038Z</updated>
    
    <content type="html"><![CDATA[<p>最近写东西碰到多种分支如错误和判断逻辑时，总是一团乱麻，有些错误不一定会发生，但是不写总感觉不对。随后摸到一本书<em>&lt;O’Reilly The Art of Readable Code&gt;</em>，图文并茂，看了看确实写得不错。</p><a id="more"></a><hr><p>结合<a href="https://softwareengineering.stackexchange.com/questions/122485/elegant-ways-to-handle-ifif-else-else" target="_blank" rel="noopener">StackOverflow</a>的一个例子，来看看处理过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if(FileExists(file))</span><br><span class="line">&#123;</span><br><span class="line">    contents = OpenFile(file); // &lt;-- prevents inclusion in if</span><br><span class="line">    if(SomeTest(contents))</span><br><span class="line">    &#123;</span><br><span class="line">        DoSomething(contents);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        DefaultAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    DefaultAction();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的代码处理起来没什么问题，但是看着别扭（如果当外层的判断一多，if/else就对应增多，形成多个嵌套）。因为它把所有的步骤放在一个过程里处理了，如果要进行维护，阅读起来并不简单。我把它理解为流程图逻辑，流程图是产品需求用到的，还是尽量不要用到代码上吧。</p><hr><p><strong>改进后：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(FileExists(file))</span><br><span class="line">&#123;</span><br><span class="line">    contents = OpenFile(file); // &lt;-- prevents inclusion in if</span><br><span class="line">    if(SomeTest(contents))</span><br><span class="line">    &#123;</span><br><span class="line">        DoSomething(contents);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DefaultAction();</span><br></pre></td></tr></table></figure><p>这次改进后程序先处理DoSomething()，中断异常情况，最后处理默认情况。</p><hr><p><strong>再次改进：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">contents_t get_contents(name_t file)</span><br><span class="line">&#123;</span><br><span class="line">    if(!FileExists(file))</span><br><span class="line">        return null;</span><br><span class="line"></span><br><span class="line">contents = OpenFile(file);</span><br><span class="line">if(!SomeTest(contents)) // like IsContentsValid</span><br><span class="line">    return null;</span><br><span class="line"></span><br><span class="line">return contents;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">contents = get_contents(file)</span><br><span class="line">contents ? DoSomething(contents) : DefaultAction();</span><br></pre></td></tr></table></figure><p>用函数处理，把判断和逻辑分开，这样功能就分离出来了，清晰明了，利于维护。</p><hr><p><strong>总结：</strong>我偏向于处理异常后，再处理正常情况，因为如果为函数的话，你所做事情应该是匹配函数名的，剔除掉异常情况，最后得到的就是正常情况的结果，不是吗？</p><p>最后，回归到IF/ELSE，最初代码的IF/ELSE形式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(contents_t contents = get_contents(file))</span><br><span class="line">    DoSomething(contents);</span><br><span class="line">else</span><br><span class="line">    DefaultAction();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近写东西碰到多种分支如错误和判断逻辑时，总是一团乱麻，有些错误不一定会发生，但是不写总感觉不对。随后摸到一本书&lt;em&gt;&amp;lt;O’Reilly The Art of Readable Code&amp;gt;&lt;/em&gt;，图文并茂，看了看确实写得不错。&lt;/p&gt;
    
    </summary>
    
      <category term="CODE" scheme="http://yoursite.com/categories/CODE/"/>
    
    
      <category term="NOTE" scheme="http://yoursite.com/tags/NOTE/"/>
    
  </entry>
  
  <entry>
    <title>Yesterday</title>
    <link href="http://yoursite.com/post/Yesterday/"/>
    <id>http://yoursite.com/post/Yesterday/</id>
    <published>2018-11-19T05:27:39.000Z</published>
    <updated>2019-05-17T10:02:38.715Z</updated>
    
    <content type="html"><![CDATA[<p>I had a baaaad sleep last night.</p><p>In fact, I admit that I stayed up :x</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I had a baaaad sleep last night.&lt;/p&gt;
&lt;p&gt;In fact, I admit that I stayed up :x&lt;/p&gt;

      
    
    </summary>
    
      <category term="OTHERS" scheme="http://yoursite.com/categories/OTHERS/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO搭建</title>
    <link href="http://yoursite.com/post/hexo%20build/"/>
    <id>http://yoursite.com/post/hexo build/</id>
    <published>2018-11-15T10:00:00.000Z</published>
    <updated>2019-05-29T03:07:14.483Z</updated>
    
    <content type="html"><![CDATA[<!-- more excerpt: 这是摘抄，用来展示文章简要内容，事实证明，没用--><p>轻量级的Hexo为静态页面的制作提供了很好的发挥空间，风格扁平舒适。</p><a id="more"></a><p>用hexo搭建网站省时省力，建议使用成熟的next主题(本站不是)，不然会耗费较多时间。</p><hr><p>安装git<br>安装node.js(hexo依赖)<br>安装hexo</p><hr><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init  //生成hexo目录</span><br></pre></td></tr></table></figure><p> 需要在空文件夹中生成。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a><strong>目录结构</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>配置文件_config.yml有两个，一个为hexo，另一个为themes下的配置。</p><h4 id="生成本地预览"><a href="#生成本地预览" class="headerlink" title="生成本地预览"></a><strong>生成本地预览</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d &amp;&amp; hexo g &amp;&amp; hexo s //开启预览访问端口 默认4000</span><br></pre></td></tr></table></figure><p>主题文件在themes下，默认为landscape。你可以在<a href="">hexo.io</a>中找到喜欢的主题。</p><h4 id="线上部署"><a href="#线上部署" class="headerlink" title="线上部署"></a><strong>线上部署</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save  //安装部署插件</span><br><span class="line">$ hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>本地效果完成后，可以进行Github Pages的部署（当然还有其他选择）。在hexo中的_config.yml中设置deploy参数(配置项冒号后要有空格)。配置有两种方式：http或者ssh。</p><hr><p><em>关于自定义域名：域名解析类型为CNAME；根目录source文件夹下创建CNAME.txt，写入自定义域名，保存后去掉文件后缀</em></p>]]></content>
    
    <summary type="html">
    
      &lt;!-- more excerpt: 这是摘抄，用来展示文章简要内容，事实证明，没用--&gt;
&lt;p&gt;轻量级的Hexo为静态页面的制作提供了很好的发挥空间，风格扁平舒适。&lt;/p&gt;
    
    </summary>
    
      <category term="BUILD" scheme="http://yoursite.com/categories/BUILD/"/>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>Rick &amp; Morty</title>
    <link href="http://yoursite.com/post/Rick%20&amp;%20Morty/"/>
    <id>http://yoursite.com/post/Rick &amp; Morty/</id>
    <published>2018-01-30T07:04:16.000Z</published>
    <updated>2019-07-03T06:12:39.308Z</updated>
    
    <content type="html"><![CDATA[<p>Rick and Morty是一部看了让人觉得它是充满欢乐的动漫。其实我们都懂，悲伤弥漫的世界需要欢乐，仅此而已。 </p><a id="more"></a><p>OST–Hurt by Nine Inch Nails</p><p>​    虽然一看便知该剧以科幻为主体，但大量的黑色幽默和恰到好处的政治隐喻让整个系列带上强烈的现实主义色彩。这个系列很成功，在我看来它把现实社会大刀一切分成两个角色–看起来冷酷无情的糟老头Rick和看起来人畜无害的初中生Morty，爷孙俩通过亲情联系在一起。smith一家子–强势的妻子Beth、懦弱的父亲Jerry、小太妹姐姐Summer，这几个主要人物使这个系列表现力十足。</p><p>​    Seanson 1让人目不暇接，开始接触Rick n Morty时我是在发烧的情况下看的，当然了，我被鲜艳丰富的色彩渲染的头昏眼花，还觉得恶心(发烧时看电视会觉得恶心)，但是我喜欢这种动漫风格，它就事论事，不走花腔。漫长的第一季结束后我大概了解了所有人物之间的关系，Smith一家很欢乐。从Rick说起：一个天才老顽童，天才两字其实根本都配不上他，却住在女婿的房子里，把车库当作实验室，时不时会受到Jerry的嘲讽，随后Beth和Jerry就会展开争吵，最后当然是Rick走出争吵的范围；Morty是一个初中小伙子，矮矮的个子，不聪明(父母是这么描述的:D)，喜欢班里的校花Jessica却又不敢示爱，有时会朝Rick大叫，因为有时候情况确实很危险但是Rick却丢下他不管，但最终喜欢跟着Rick冒险；Summer是Morty的姐姐，是Beth在高中怀孕时生下的，借而Jerry和Beth才维持了那么多年的婚姻，Summer性格没有明显缺陷，是一个和Morty一样爱着Grandpa Rick的高中生；Beth这个角色很典型，她是个兽医，专门为马做手术，梦想是当一个人类外科医生，虽然总被丈夫Jerry说你只会医马，但强势的她不容别人质疑自己的能力，可以说是家里的顶梁柱；Jerry是一个…无业游民，失业中，梦想自己能进广告公司推销自己的广告，生性懦弱，自私，和妻子Beth相爱相杀，讨厌Rick。</p><p>​    有了理解后继续看Season 2，我发现基调慢慢的变得悲伤。如果说第一季是纯粹说梗让观众大笑，第二季渐渐得就会让你笑不出来，但至少，它让你不会停止思考。Morty觉得Rick所做的一些事觉得残忍，在Rick向Morty展示的时候指责Rick，看不起Rick，然后在危险的环境中盲目展示善良，想帮助弱小的人，结果很明显，每次Morty这样做都给Rick和自己带来了生命危险，最后还是靠Rick解决问题；第九集在Morty最终被压抑的本性爆发后Rick拦都拦不住，最后Rick说是因为Morrty吃了的饼干中含暴躁因子才无法压抑，用谎言包裹住了Morty脆弱的内心，Morty才得以觉得自己本性并不坏。诚然，我们可以说Morty还小，才初中，加之他并不聪明，但Morty是具有代表性的，Morty代表着那些看起来弱小的一批人，他们在自己所认为比自己高一等的同类面前表现的弱小，心里实则嫉妒，自卑，在本性暴露的时候无法控制，虚伪是他们的外衣，他们不能进化的原因是因为他们不想认清自己，然后继续保持自我。说完了社会，还有悲伤的一点是因为Rick发现自己老了，自己会和地球上的所有人一样，慢慢老去然后死亡，什么都没有，虽然他有涅槃计划，但其实他是个正常人，在他麻痹自己最后挣扎着认清了人生老病死的这一生后，他杀光了所有自己的克隆体。他能把黑洞变成恒星，但却眼睁睁地看着喜爱的事物逝去；他喜欢嘲笑和玩弄孙子孙女和Jerry，但保留着Morty和Summer小时候的照片。Rick是人，虽然拥有全宇宙嫉妒的能力，却不是神的身躯。第二季最后一集被Jerry背叛的时候彻底死心，把自己送进监狱保全了家人。Rick的结局是客观发展后的事实，他又不能天天带着家人逃亡，因为家人会崩溃，自己也是个凡人，不能时刻保全所有人。最后一集Jerry说：“我们悄悄向警察告发Rick的位置，然后我们得以安全”。这句话简直把Jerry最后的人性描述得淋漓尽致，Rick败在了自己的软肋–女儿孙女和孙子。</p><p>​    整个系列形式为冒险记，Season 1和Season 2着重铺垫，Season 3注重润色和补全，使故事线回归。在经历了这么多后，这家子人变了吗？是的，他们都成长了：痛苦，甜蜜，挣扎，绝望，快乐，激动，愤怒，同情…但最后还是一家子。</p><p>​    撇开情感内容，灯塔国的自黑和揭露能力真强，比如使命必达先生一集，比如银河联邦那一集，比如守护者联盟那一集，比如总统那一集，虽说权当搞笑，但这要在..上映，制作组萌芽阶段应该就没了。每一集的叙事手法多种多样却不复杂，meme繁出。不得不收说看完Season 3之后觉得有点少，也期望能够看到Season 4的出现；就算不出续季，在我看来这三季也完整地画出了一个圆，虽然圆里面的有些坑没有填满，但在空闲时间，挑出几集，再回味一遍，不也很棒吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rick and Morty是一部看了让人觉得它是充满欢乐的动漫。其实我们都懂，悲伤弥漫的世界需要欢乐，仅此而已。 &lt;/p&gt;
    
    </summary>
    
      <category term="OTHERS" scheme="http://yoursite.com/categories/OTHERS/"/>
    
    
      <category term="OPINION" scheme="http://yoursite.com/tags/OPINION/"/>
    
  </entry>
  
</feed>
